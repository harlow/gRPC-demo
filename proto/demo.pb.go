// Code generated by protoc-gen-go.
// source: proto/demo.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	proto/demo.proto

It has these top-level messages:
	Greeting
	Reply
*/
package proto

import proto1 "github.com/golang/protobuf/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal

type Greeting struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *Greeting) Reset()         { *m = Greeting{} }
func (m *Greeting) String() string { return proto1.CompactTextString(m) }
func (*Greeting) ProtoMessage()    {}

type Reply struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *Reply) Reset()         { *m = Reply{} }
func (m *Reply) String() string { return proto1.CompactTextString(m) }
func (*Reply) ProtoMessage()    {}

func init() {
}

// Client API for Demo service

type DemoClient interface {
	SayHello(ctx context.Context, in *Greeting, opts ...grpc.CallOption) (*Reply, error)
}

type demoClient struct {
	cc *grpc.ClientConn
}

func NewDemoClient(cc *grpc.ClientConn) DemoClient {
	return &demoClient{cc}
}

func (c *demoClient) SayHello(ctx context.Context, in *Greeting, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := grpc.Invoke(ctx, "/proto.Demo/SayHello", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Demo service

type DemoServer interface {
	SayHello(context.Context, *Greeting) (*Reply, error)
}

func RegisterDemoServer(s *grpc.Server, srv DemoServer) {
	s.RegisterService(&_Demo_serviceDesc, srv)
}

func _Demo_SayHello_Handler(srv interface{}, ctx context.Context, buf []byte) (interface{}, error) {
	in := new(Greeting)
	if err := proto1.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(DemoServer).SayHello(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Demo_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Demo",
	HandlerType: (*DemoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _Demo_SayHello_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
